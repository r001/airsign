#!/usr/bin/env node
const api = require('termux')
const decode = require('qr-encoding').decode
var shell = require('shelljs')
const ethUtil = require('ethereumjs-util')
const BN = require('bn.js')
const fs = require('fs')
const prompt = require('prompt')
var QRCode = require('qrcode')
const sigUtil = require('eth-sig-util')

const schema = { properties: {
	password: { hidden: true },
}}
const ai = '/data/data/com.termux/files/home/airsign/'
api.clipboardGet()
  .run()
  .then(function (text) {
    text = text.replace(/^\\s*/, '').replace(/\\s*$/, '')
    var sigParams = decode(text)
    var args = ''
    var cmd = ''
    var fromAddr
    args += ' --key-store ' + ai + '.ethereum/keystore/'
    var fullCmd = 'ethsign ls' + cmd + args
    shell.exec(fullCmd, {silent: true}, function (code, stdout, stderr) {
      if (code !== 0) throw new Error('ethsign ls: Error:' + stderr)
      var addr = stdout.replace(/^\s*(\S+)\s.*$/mg, '$1')
      var addresses = addr.toLowerCase().split('\n')
      var re = new RegExp(sigParams.from_part.toLowerCase())
      fromAddr = addresses.find(add => add.match(re))
      if (!fromAddr) throw new Error('Address not found for: ' + sigParams.from_part)
      switch (sigParams.type) {
        case 'sign_transaction':
          cmd += ' tx'
          args += ' --from ' + fromAddr
          args += ' --to ' + sigParams.payload.to
          args += ' --gas-price ' + h2i(sigParams.payload.gasPrice)
          args += ' --gas-limit ' + h2i(sigParams.payload.gasLimit)
          args += ' --chain-id ' + sigParams.payload.chainId.toString()
          args += ' --nonce ' + h2i(sigParams.payload.nonce)
          args += ' --value ' + h2i(sigParams.payload.value)
          args += ' --data ' + sigParams.payload.data
          args += ' --sig'
          break
        case 'sign_message':
          cmd += ' msg'
          args += ' --no-prefix '
          args += ' --data ' + sigParams.payload
          args += ' --from ' + fromAddr
          break
        case 'sign_personal_message':
          cmd += ' msg'
          args += ' --data ' + sigParams.payload
          args += ' --from ' + fromAddr
          break
        case 'sign_typed_data':
          cmd += ' msg'
          args += ' --no-prefix '
          args += ' --data ' + sigUtil.TypedDataUtils.sign(JSON.parse(sigParams.payload))
          args += ' --from ' + fromAddr
          break
        default:
          throw new Error('Not supported: ' + sigParams.type)
    }
    args += ' --passphrase-file ' + ai + 'pw'
    fullCmd = 'ethsign' + cmd + args
    console.log(args.replace(/ --/g, '\n'))
    prompt.start()
    prompt.get(schema, (err, result) => {
      if (err) {
        throw new Error(err)
      }
      fs.writeFile(ai + 'pw', result.password, err => {
        if (err) {
          throw new Error(err)
        }
        shell.exec(fullCmd, {silent: true}, function (code, stdout, stderr) {
          shell.rm('-f', ai + 'pw')
          if (code !== 0) throw new Error('Could not execute: ' + fullCmd)
          const signature = 'eths:/?s=' + stdout.replace(/\n/g, '')
          console.log('signature: ' + signature)
          QRCode.toString(signature, {type: 'terminal'}, (err, str) => {
            if (err) throw new Error(err)
            console.log(str)
          })
        })
      })
    })
  })
})
function h2i (hex) {
  return new BN(ethUtil.stripHexPrefix(hex), 16).toString(10)
}
