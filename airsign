#!/usr/bin/env node
const QRCode = require('qrcode')
const fs = require('fs')
const inquirer = require('inquirer')
const keythereum = require("keythereum")
const sigUtil = require('@metamask/eth-sig-util')
const {DataType, EthSignRequest, ETHSignature, CryptoKeypath, PathComponent} = require('@keystonehq/bc-ur-registry-eth')
const {URDecoder} = require('@ngraveio/bc-ur')
const {Common, Hardfork} = require('@ethereumjs/common')
const {Transaction, FeeMarketEIP1559Transaction} = require('@ethereumjs/tx')
const {stripHexPrefix, toBuffer, toRpcSig, ecsign, bufferToHex} = require('@ethereumjs/util')
const {keccak256} = require('ethereum-cryptography/keccak')
const rlp = require('@ethereumjs/rlp')
const {promisify} = require('es6-promisify')
const readdir = promisify(fs.readdir)
const childProcess = require('node:child_process')

var api
const arg = process.argv[2]

const color = {
	blue: '\x1b[34m',
	red: '\x1b[31m',
	green: '\x1b[32m',
	yellow: '\x1b[33m',
	reset: '\x1b[0m',
	cyan: '\x1b[36m',
	magenta: '\x1b[35m',
	bright_green: '\x1b[92m',
	bright_yellow: '\x1b[93m',
	bright_red: '\x1b[91m',
	bright_blue: '\x1b[94m',
	bright_cyan: '\x1b[96m',
	bright_white: '\x1b[97m',
	bright_magenta: '\x1b[95m',
}


;(async () => {
try {
	if (!arg) {
		// fixed bug termux hang during loading
		api = require('termux')
	}


	if (arg) {
		if (arg.match(/^-h$/)) {
			//airsign -h 0x0004d2A2f9a823C1A585fDE6514A17FF695E 0x27bbaef94405e79a71dcffcb9eeb11534ede08cc7950c1d46a6d492869c0a4a5 
			var txHash = process.argv[4]
			var address = process.argv[3]
			let fromJson = await find_key_data(false, null, address)
			let privateKey = await get_privatekey(fromJson)

		  // Ensure that the txHash is 32 bytes long (i.e., a valid keccak256 hash)
			if (txHash.length !== 66) {
				throw new Error('Invalid transaction hash length. It must be 64 chars plus "0x".');
			}

			// Sign the transaction hash
				const { r, s, v } = ecsign(stripHexPrefix(txHash), stripHexPrefix(privateKey.tostring('hex')))

			// Convert r, s, and v to hex strings and concatenate them
			const signatureHex = bufferToHex(Buffer.concat([r, s, Buffer.from(v.toString(16).padstart(2, '0'), 'hex')]))

			display_qr(signatureHex)

		} else {
				try {
					await sign(EthSignRequest.fromCBOR(Buffer.from(arg, 'hex')))
				} catch (e) {
					if (!arg.match(/-/)) {
						console.log(`Could not decode.`)
					}
					// `airsign -` called

					let answers = inquirer.prompt([
						{
							type: 'input',
							name: 'qr',
							message: 'Signable:',
							validate (value) {
								try {
									var decoder = new URDecoder()
									decoder.receivePart(value)
									return true
								} catch (e) {
									return 'Should be something like: ur:eth-sign-request/...'
								}
							},
							filter: String,
						}
					])

					await sign(answers.qr)
				}
	  }
	} else if (api.hasTermux) {
		var decoder = new URDecoder()
		var ur

		console.log(`Receiving data from clipboard... (press Ctrl+C to cancel)`)
		while (!decoder.isComplete()) {
			ur = childProcess.spawnSync('termux-clipboard-get').stdout.toString().trim()
			console.log(ur)
			if (ur.match(/ur:eth-sign-request/)) decoder.receivePart(ur)
			await sleep(1000)
		}

		if (decoder.isSuccess()) {
			var ethSignRequest = EthSignRequest.fromCBOR(decoder.resultUR().cbor)
			console.log(`Received and decoded request successfully`)

			await sign(ethSignRequest)
		} else {
			throw new Error('Could not decode.')
		}
	}

	process.exit(0)
} catch (e) {
	console.error(e.stack)
	process.exit(1)
}
})()

async function sign (ethSignRequest) {
	let fromJson = await find_key_data(true,ethSignRequest)
	const EIP_1599_TRANSACTION_TYPE = 2
	const EIP_1599_TRANSACTION_TYPE_BUFFER = Buffer.from(EIP_1599_TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex')
	let tx, data, version, type, signature, rlpDecoded, txData, common
	let rlpEncoded = ethSignRequest.getSignData()
	const nc = color.bright_blue
	switch (ethSignRequest.getDataType()) {
		case DataType.typedTransaction:
			type = rlpEncoded.subarray(0, 1)

			if (!type.equals(EIP_1599_TRANSACTION_TYPE_BUFFER)) {
				throw new Error(`Unknown transaction type ${type.toString('hex')} <> ${EIP_1599_TRANSACTION_TYPE_BUFFER.toString('hex')}`)
			}

			tx = FeeMarketEIP1559Transaction.fromSerializedTx(rlpEncoded)
			console.log(`${color.green}EIP-1559 transaction detected${color.reset}`)
			console.log(`${nc}From: ${color.blue}0x${fromJson.address}${color.reset}`)
			console.log(`${nc}To: ${color.green}${tx.to.toString()}${color.reset}`)
			console.log(`${nc}ChainId: ${color.reset}${tx.chainId}${color.reset}`)
			console.log(`${nc}Nonce: ${color.cyan}${tx.nonce}${color.reset}`)
			console.log(`${nc}Max Priority Fee Per Gas: ${color.magenta}${tx.maxPriorityFeePerGas}${color.reset}`)
			console.log(`${nc}Max Fee Per Gas: ${color.yellow}${tx.maxFeePerGas}${color.reset}`)
			console.log(`${nc}Gas Limit: ${color.red}${tx.gasLimit}${color.reset}`)
			console.log(`${nc}Value: ${color.blue}${tx.value}${color.reset}`)
			console.log(`${nc}Data: ${color.green}${tx.data.toString('hex')}${color.reset}`)
			console.log(`${nc}Access List: ${color.bright_white}${JSON.stringify(tx.toJSON().accessList)}${color.reset}`)

			break
		case DataType.transaction:
			rlpDecoded = rlp.decode(rlpEncoded).map(item => Buffer.from(item))

			txData = {
				nonce: BigInt(`0x${rlpDecoded[0].toString('hex')}`),
				gasPrice: BigInt(`0x${rlpDecoded[1].toString('hex')}`),
				gasLimit: BigInt(`0x${rlpDecoded[2].toString('hex')}`),
				to: `0x${rlpDecoded[3].toString('hex')}`,
				value: BigInt(`0x${rlpDecoded[4].toString('hex')}`),
				data: `0x${rlpDecoded[5].toString('hex')}`,
				chainId: BigInt(`0x${rlpDecoded[6].toString('hex')}`),
      }

			common = new Common({chain: txData.chainId, hardfork: Hardfork.Shanghai})
			tx = Transaction.fromTxData(txData, {common})

			console.log(`${color.green}Legacy transaction detected${color.reset}`)
			console.log(`${nc}From: ${color.blue}0x${fromJson.address}${color.reset}`)
			console.log(`${nc}To: ${color.green}${tx.toString()}${color.reset}`)
			console.log(`${nc}Gas Price: ${color.green}${tx.gasPrice}${color.reset}`)
			console.log(`${nc}Gas Limit: ${color.red}${tx.gasLimit}${color.reset}`)
			console.log(`${nc}Value: ${color.blue}${tx.value}${color.reset}`)
			console.log(`${nc}Data: ${color.green}0x${tx.data.toString('hex')}${color.reset}`)
			console.log(`${nc}Nonce: ${color.cyan}${tx.nonce}${color.reset}`)

			break
		case DataType.personalMessage:
			console.log(`${color.green}Personal message detected${color.reset}`)
			console.log(`${nc}From: ${color.blue}${fromJson.address}${color.reset}`)
			data = Buffer.from(rlp.decode(rlpEncoded))
			console.log(`${nc}Message: ${color.green}${data.toString('utf8')}${color.reset}`)

			break
		case DataType.typedData:
			[version, data] = rlp.decode(rlpEncoded)
			version = Buffer.from(version)
			data = Buffer.from(data)
			version = `V${version.toString('utf8')}`
			data = JSON.parse(data.toString('utf8'))

			console.log(`${color.green}Typed data detected${color.reset}`)
			console.log(`${nc}From: ${color.blue}${fromJson.address}${color.reset}`)
			console.log(`${nc}Version: ${color.yellow}${version}${color.reset}`)
			console.log(`${nc}Data: ${color.green}${JSON.stringify(data, null, 2)}${color.reset}`)

			break
		default:
			throw new Error(`${color.bright_red}Type not supported: ${color.bright_white}${ethSignRequest.getDataType()}${color.reset}`)
	}

	var privateKey = await get_privatekey(fromJson)

	switch (ethSignRequest.getDataType()) {
		case DataType.typedTransaction:
			tx = tx.sign(privateKey)

			signature = toRpcSig(
				tx.v,
				toBuffer(tx.r),
				toBuffer(tx.s),
				tx.common.chainId
			)

			break
		case DataType.transaction:
			tx = tx.sign(privateKey)

			signature = toRpcSig(
				tx.v,
				toBuffer(tx.r === '' ? '0x' : tx.r),
				toBuffer(tx.s === '' ? '0x' : tx.s),
				tx.common.chainId()
			)

			break
		case DataType.personalMessage:
			signature = sigUtil.personalSign({
				privateKey,
				data,
			})

			break
		case DataType.typedData:
			signature = sigUtil.signTypedData({
				privateKey,
				data,
				version,
			})

			break
		default:
			throw new Error(`${color.bright_red}Type not supported: ${color.bright_white}${ethSignRequest.getDataType()}${color.reset}`)
	}

	privateKey = null
	let ur = (new ETHSignature(Buffer.from(stripHexPrefix(signature), 'hex'), ethSignRequest.getRequestId(), ethSignRequest.getOrigin())).toUREncoder(500)
	let urPart = ur.nextPart()
	display_qr(urPart)
}

function sleep (ms) {
	return new Promise(resolve => setTimeout(resolve, ms))
}

function getFakeDerivePath (address) {
	let addressHash = keccak256(Uint8Array.from(Buffer.from(address, 'hex')))
	return (new CryptoKeypath (
		[0, 1, 2, 3].map(index => new PathComponent({index: addressHash.at(index), hardened:true})))).getPath()
}

async function find_key_data(useDerivationPath = true, ethSignRequest, address) {
	const ai = '/data/data/com.termux/files/home/airsign/'
	let parentFingerprint = Buffer.from('12345678', 'hex')
	var keyStore = ai + '.ethereum/keystore/'
	let files = await readdir(keyStore)
	let fromJson
	let	fromJsons = files
		.map(file => {
			try {
				return JSON.parse(fs.readFileSync(keyStore + file))
			} catch (e) {
				return {address: ''}
			}
		})
	if(useDerivationPath) {
		fromJson=fromJsons.find(json =>
			(!!json.address) && getFakeDerivePath(json.address, parentFingerprint) ===
			ethSignRequest.getDerivationPath()
		)
	} else {
		fromJson = fromJsons.find(json => (!!json.address) && '0x' + json.address.toLowerCase() === address.toLowerCase())
	}

	if (!fromJson) throw new Error('Address not found.')
	return fromJson
}

async function get_privatekey(fromJson) {
	let answer = await inquirer.prompt([
		{
			type: 'password',
			name: 'pw',
			message: 'Password:',
			mask: '*',
		}
	])

	var privateKey = keythereum.recover(answer.pw, fromJson)
	answer.pw = null
	return privateKey
}

function display_qr(toQrString) {
	const types = ['terminal', 'utf8', 'svg']
	types.forEach(type => {
		QRCode.toString(toQrString, {type}, (err, str) => {
			if (err) throw new Error(err)
			fs.writeFileSync(`qr.${type}`, Buffer.from(str, 'utf8'))
		})
	})

	// eslint-disable-next-line no-constant-condition
	while (true) {
		QRCode.toString(toQrString, {type: "terminal"}, (err, str) => {
			if (err) throw new Error(err)
			console.log(str)
			console.log(toQrString)
			require('child_process').spawnSync("read _ ", {shell: true, stdio: [0, 1, 2]});
		})
	}
}
